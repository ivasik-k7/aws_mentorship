# --------------------------------------------------------------------------------
# This file was automatically generated by a merging tool
# DO NOT MODIFY THIS FILE MANUALLY
# Any changes should be made in the original source files
# --------------------------------------------------------------------------------

# ---- Beginning of cdn.part.tf ----


# resource "aws_cloudfront_distribution" "cdn" {
#   enabled         = true
#   is_ipv6_enabled = true
#   comment         = "${var.environment}-cdn"

#   origin {
#     origin_id   = "${var.environment}-alb-origin"
#     domain_name = aws_lb.web.dns_name

#     custom_origin_config {
#       http_port              = 80
#       https_port             = 443
#       origin_protocol_policy = "http-only"
#       origin_ssl_protocols   = ["TLSv1.2"]
#     }

#     connection_attempts = 3
#     connection_timeout  = 10
#   }

#   default_cache_behavior {
#     allowed_methods = ["GET", "HEAD"]
#     cached_methods  = ["GET", "HEAD"]

#     target_origin_id = "${var.environment}-alb-origin"
#     cache_policy_id  = data.aws_cloudfront_cache_policy.caching_optimized.id

#     viewer_protocol_policy = "allow-all"
#     compress               = true
#   }

#   restrictions {
#     geo_restriction {
#       restriction_type = "none"
#     }
#   }

#   viewer_certificate {
#     cloudfront_default_certificate = true
#   }
# }

# ---- End of cdn.part.tf ----

# ---- Beginning of datasources.part.tf ----

data "aws_availability_zones" "this" {
  state = "available"
}

data "aws_key_pair" "primary" {
  key_name = "Primary"
}

data "aws_region" "current" {}

data "aws_route53_zone" "main" {
  name         = var.domain_name
  private_zone = false
}

data "aws_acm_certificate" "certificate" {
  domain   = var.domain_name
  statuses = ["ISSUED"]

  most_recent = true
}

data "aws_caller_identity" "current" {}

data "aws_ami" "amazon_linux" {
  most_recent = true
  owners      = ["amazon"]

  filter {
    name   = "name"
    values = ["amzn2-ami-hvm-*-x86_64-gp2"]
  }

  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }

  filter {
    name   = "root-device-type"
    values = ["ebs"]
  }
}

data "aws_cloudfront_cache_policy" "caching_optimized" {
  name = "Managed-CachingOptimized"
}

# ---- End of datasources.part.tf ----

# ---- Beginning of route53.part.tf ----
resource "aws_route53_record" "root" {
  zone_id = data.aws_route53_zone.main.zone_id
  name    = var.domain_name

  type = "A"

  alias {
    name                   = aws_elb.web.dns_name # Updated to CLB attribute
    zone_id                = aws_elb.web.zone_id  # Updated to CLB attribute
    evaluate_target_health = true
  }
}

resource "aws_route53_record" "www" {
  zone_id = data.aws_route53_zone.main.zone_id
  name    = "www.${var.domain_name}"

  type = "A"

  alias {
    name                   = aws_elb.web.dns_name # Updated to CLB attribute
    zone_id                = aws_elb.web.zone_id  # Updated to CLB attribute
    evaluate_target_health = true
  }
}

# resource "aws_route53_record" "cdn" {
#   zone_id = data.aws_route53_zone.main.zone_id
#   name    = "cdn.${var.domain_name}"

#   type = "A"

#   alias {
#     name                   = aws_cloudfront_distribution.cdn.domain_name
#     zone_id                = aws_cloudfront_distribution.cdn.hosted_zone_id
#     evaluate_target_health = true
#   }
# }

# ---- End of route53.part.tf ----

# ---- Beginning of s3.part.tf ----

module "cdn_bucket" {
  source = "../modules/s3"

  bucket_name = "${var.environment}-cdn-bucket-${data.aws_caller_identity.current.account_id}"

  versioning_enabled = true
  encryption_enabled = true

  block_public_acls       = true
  block_public_policy     = true
  ignore_public_acls      = true
  restrict_public_buckets = true

  object_ownership = "BucketOwnerPreferred"

  tags = var.default_tags
}

# resource "aws_s3_bucket_policy" "cf_policy" {
#   bucket = module.cdn_bucket.bucket_id

#   policy = jsonencode({
#     Version = "2012-10-17",
#     Statement = [
#       {
#         Effect = "Allow",
#         Principal = {
#           Service = "cloudfront.amazonaws.com"
#         },
#         Action   = "s3:GetObject",
#         Resource = "${module.cdn_bucket.bucket_arn}/*",
#         Condition = {
#           StringEquals = {
#             "AWS:SourceArn" = aws_cloudfront_distribution.cdn.arn
#           }
#         }
#       }
#     ]
#   })
# }

resource "aws_s3_object" "index_html" {
  bucket       = module.cdn_bucket.bucket_id
  key          = "index.html"
  source       = "${path.module}/index.html"
  content_type = "text/html"
}

# ---- End of s3.part.tf ----

# ---- Beginning of template.part.tf ----


resource "aws_security_group" "web_sg" {
  vpc_id      = module.vpc.vpc_id
  name        = "${var.environment}-web-sg"
  description = "Security group for web servers"

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
    description = "Allow SSH access"
  }

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
    description = "allow HTTP"
  }

  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
    description = "allow HTTPS"
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = merge(var.default_tags, {
    Name = "${var.environment}-web-sg"
  })
}

resource "aws_security_group" "lb_sg" {
  vpc_id      = module.vpc.vpc_id
  name        = "${var.environment}-lb-sg"
  description = "Security group for load balancer"

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
    description = "allow HTTP"
  }

  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
    description = "allow HTTPS"
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = merge(var.default_tags, {
    Name = "${var.environment}-lb-sg"
  })
}

resource "aws_iam_role" "web_role" {
  name = "${var.environment}-web-role"
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Action = "sts:AssumeRole"
      Effect = "Allow"
      Principal = {
        Service = "ec2.amazonaws.com"
      }
    }]
  })
}

resource "aws_iam_policy" "web_s3_policy" {
  name        = "${var.environment}-web-s3-policy"
  description = "Policy for web servers to access S3"
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Effect = "Allow"
      Action = [
        "s3:ListBucket",
        "s3:GetObject",
        "s3:PutObject",
        "s3:DeleteObject"
      ]
      Resource = [
        "${module.cdn_bucket.bucket_arn}",
        "${module.cdn_bucket.bucket_arn}/*"
      ]
    }]
  })
}

resource "aws_iam_role_policy_attachment" "web_s3_attach" {
  role       = aws_iam_role.web_role.name
  policy_arn = aws_iam_policy.web_s3_policy.arn
}


resource "aws_iam_instance_profile" "web_profile" {
  name = "${var.environment}-web-profile"
  role = aws_iam_role.web_role.name

}

resource "aws_launch_template" "web" {
  instance_type = "t2.micro"
  name          = "${var.environment}-web-template"
  image_id      = data.aws_ami.amazon_linux.id
  user_data = base64encode(<<EOF
#!/bin/bash
yum update -y
yum install -y httpd aws-cli

systemctl enable httpd
systemctl start httpd

S3_BUCKET="dev-cdn-bucket-970547334384"
S3_FILE="index.html"
WEB_DIR="/var/www/html"

aws s3 cp s3://$S3_BUCKET/$S3_FILE $WEB_DIR/index.html

chown apache:apache $WEB_DIR/index.html
chmod 644 $WEB_DIR/index.html

DEVICE="/dev/xvdf"
MOUNT_POINT="/mnt/data"
if [ ! -e "$MOUNT_POINT" ]; then
  mkfs.ext4 $DEVICE
  mkdir -p $MOUNT_POINT
  mount $DEVICE $MOUNT_POINT
  echo "$DEVICE $MOUNT_POINT ext4 defaults,nofail 0 2" >> /etc/fstab
fi
EOF
  )

  iam_instance_profile {
    name = aws_iam_instance_profile.web_profile.name
  }

  key_name = data.aws_key_pair.primary.key_name

  block_device_mappings {
    device_name = "/dev/xvda"
    ebs {
      volume_size           = 8
      volume_type           = "gp2"
      delete_on_termination = true
    }
  }

  block_device_mappings {
    device_name = "/dev/xvdf"
    ebs {
      volume_size           = 8
      volume_type           = "gp2"
      delete_on_termination = true
    }
  }

  network_interfaces {
    associate_public_ip_address = true
    security_groups = [
      aws_security_group.web_sg.id,
    ]
  }

  monitoring {
    enabled = true
  }

  tag_specifications {
    resource_type = "instance"

    tags = merge(var.default_tags, {
      Name = "${var.environment}-web-instance"
    })
  }

  tag_specifications {
    resource_type = "volume"
    tags = merge(var.default_tags, {
      Name = "${var.environment}-web-volume"
    })
  }
}

resource "aws_autoscaling_group" "web_asg" {
  name                = "${var.environment}-web-asg"
  vpc_zone_identifier = module.vpc.public_subnet_ids
  load_balancers      = [aws_elb.web.name]
  health_check_type   = "ELB"
  min_size            = 1
  max_size            = 3
  desired_capacity    = 2

  launch_template {
    id      = aws_launch_template.web.id
    version = "$Latest"
  }

  # target_group_arns   = [aws_lb_target_group.primary.arn] # ALB section
}

resource "aws_elb" "web" {
  name            = "${var.environment}-web-clb"
  internal        = false
  security_groups = [aws_security_group.lb_sg.id]
  subnets         = module.vpc.public_subnet_ids

  cross_zone_load_balancing   = true
  idle_timeout                = 60
  connection_draining         = true
  connection_draining_timeout = 300

  listener {
    instance_port     = 80
    instance_protocol = "HTTP"
    lb_port           = 80
    lb_protocol       = "HTTP"
  }

  listener {
    instance_port      = 80
    instance_protocol  = "HTTP"
    lb_port            = 443
    lb_protocol        = "HTTPS"
    ssl_certificate_id = data.aws_acm_certificate.certificate.arn
  }

  health_check {
    healthy_threshold   = 2
    unhealthy_threshold = 2
    timeout             = 5
    target              = "HTTP:80/"
    interval            = 30
  }


  tags = merge(var.default_tags, {
    Name = "${var.environment}-web-elb"
  })

}

# This balancer type works just fine for HTTP/HTTPS traffic
# resource "aws_lb" "web" {
#   enable_deletion_protection = false
#   enable_http2               = true
#   internal                   = false

#   load_balancer_type = "application"
#   name               = "${var.environment}-web-lb"

#   security_groups = [
#     aws_security_group.lb_sg.id,
#   ]

#   subnets = module.vpc.public_subnet_ids
# }

# resource "aws_lb_target_group" "primary" {
#   name     = "${var.environment}-primary-tg"
#   port     = 80
#   protocol = "HTTP"
#   vpc_id   = module.vpc.vpc_id

#   health_check {
#     path                = "/"
#     protocol            = "HTTP"
#     matcher             = "200"
#     interval            = 30
#     timeout             = 5
#     healthy_threshold   = 2
#     unhealthy_threshold = 2
#   }
# }

# resource "aws_lb_listener" "web_https_listener" {
#   load_balancer_arn = aws_lb.web.arn
#   port              = 443
#   protocol          = "HTTPS"
#   ssl_policy        = "ELBSecurityPolicy-2016-08"
#   certificate_arn   = data.aws_acm_certificate.certificate.arn
#   default_action {
#     type             = "forward"
#     target_group_arn = aws_lb_target_group.primary.arn
#   }
# }

# ---- End of template.part.tf ----

# ---- Beginning of vpc.part.tf ----

module "vpc" {
  source = "../modules/vpc"


  identifier = "${var.environment}-vpc-${data.aws_caller_identity.current.account_id}"

  availability_zones = data.aws_availability_zones.this.names

  vpc_cidr             = "10.0.0.0/16"
  public_subnet_cidrs  = ["10.0.2.0/24", "10.0.3.0/24", ]
  private_subnet_cidrs = ["10.0.4.0/24"]

  enable_nat_gateway = false
  enable_flow_logs   = false

  default_tags = var.default_tags
}

resource "aws_vpc_endpoint" "s3" {
  vpc_id            = module.vpc.vpc_id
  service_name      = "com.amazonaws.${data.aws_region.current.name}.s3"
  vpc_endpoint_type = "Gateway"

  tags = merge(var.default_tags, {
    Name = "${var.environment}-s3-endpoint"
  })
}

# ---- End of vpc.part.tf ----

